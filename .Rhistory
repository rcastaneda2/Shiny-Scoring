c_ramp <- colorRamp(c("red", "green","green"), space="Lab")
# draw the normal curve, without axes; reduce margins on left, top, and right
par(mar=c(2,0,0,0))
curve(dnorm(x,0,1), xlim=c(-3,3), ylim=c(-0.03, .45), xlab="", ylab="", axes=FALSE)
# Calculate polygons for each stanine region
# S.x = x values of polygon boundary points, S.y = y values
for (i in 1:(length(stan.z)-1)) {
S.x  <- c(stan.z[i], seq(stan.z[i], stan.z[i+1], 0.01), stan.z[i+1])
S.y  <- c(0, dnorm(seq(stan.z[i], stan.z[i+1], 0.01)), 0)
polygon(S.x,S.y, col=rgb(c_ramp(i/9), max=255))
}
#Paste Stanines
text(seq(-2,2, by=.5), 0.015, label=1:9, col="white", font=2)
# print cumulative probabilities in black below the curve
text(seq(-1.75,1.75, by=.5), -0.015, label=paste(round(stan.PR[-c(1, 10)], 2)*100, "%", sep=""), col="black", adj=.5, cex=.8)
text(0, -0.035, label="Percentage of sample <= this value", adj=0.5, cex=.8)
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z, 0.01), to.z)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01)), 0)
polygon(S.x,S.y, col="red")
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z, 0.01), to.z)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01)), 0)
polygon(S.x,S.y, col="red")
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z.red <- qnorm(.25)
to.z.yellow <- qnorm(.025)
to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z, 0.01), to.z)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01)), 0)
polygon(S.x,S.y, col="red")
S.x  <- c(from.z.red, seq(from.z.red, to.z, 0.01), to.z)
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
polygon(S.x,S.y, col="red")
qnorm(.25)
qnorm(.5)
qnorm(.30)
qnorm(.40)
qnorm(.250)
qnorm(.150)
qnorm(.14)
qnorm(.13)
qnorm(.11)
qnorm(.10)
qnorm(.17)
qnorm(.16)
qnorm(.15)
qnorm(.155)
qnorm(.154)
qnorm(.159)
qnorm(.1599)
qnorm(.16)
qnorm(1)
qnorm(.99)
qnorm(.99999)
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01)), 0)
s.x
s.x
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
s.x
s.x
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01)), 0)
s.x
s.y
S.x
dim(S.x)
length(S.x)
length(S.y)
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="green")
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.red)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green")
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow")
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red")
vline(-1)
abline(v=-1)
abline(v=-1,col="red")
abline(v=-1,col="red",lwd=2)
abline(v=-1,col="red",lwd=2,lty="dotted")
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green")
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow")
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red")
abline(v=-1,col="red",lwd=2,lty="dotted")
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green")
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow")
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red")
abline(v=-1,col="red",lwd=3,lty="dotted")
plotscore<-function(score){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green")
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow")
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red")
abline(v=score,col="red",lwd=3,lty="dotted")
}
plotscore(3)
plotscore(-3)
plotscore(-2)
plotscore(-2.5)
50+19.1+15+9.2
50+19.1+15
50+19.1+15+9.2
.02275*2
plotscore<-function(score){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main="Normal density")
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green") #85% people
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow") #95% People
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red") #<1% People
abline(v=score,col="black",lwd=3,lty="dotted")
}
plotscore(-2.5)
plotscore<-function(score,tittle="Physical Subscale"){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main=title)
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green") #85% people
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow") #95% People
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red") #<1% People
abline(v=score,col="black",lwd=3,lty="dotted")
}
plotscore(-2.5,"Physical Subscale")
plotscore<-function(score,tittle){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main=title)
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green") #85% people
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow") #95% People
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red") #<1% People
abline(v=score,col="black",lwd=3,lty="dotted")
}
plotscore(-2.5,"Physical Subscale")
plotscore(-2.5,c("Physical Subscale"))
plotscore<-function(score,tittle){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main=title)
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green") #85% people
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow") #95% People
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red") #<1% People
abline(v=score,col="black",lwd=3,lty="dotted")
}
plotscore(-2.5,c("Physical Subscale"))
plotscore(-2.5,c("Psycho-Social Subscale"))
plotscore<-function(score,title){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main=title)
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green") #85% people
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow") #95% People
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red") #<1% People
abline(v=score,col="black",lwd=3,lty="dotted")
}
plotscore(-2.5,c("Physical Subscale"))
plotscore(-2.5,c("Psycho-Social Subscale"))
runApp()
runApp()
runApp()
runApp()
plotscore<-function(score,title){
# draw the normal curve
curve(dnorm(x,0,1), xlim=c(-3,3), main=title)
# define shaded region
from.z <- -3
to.z.green<-c(3)
to.z.yellow <- qnorm(.158)
to.z.red<-qnorm(.02275)
#
# to.z.red <- qnorm(.158) #Z score of -1
# to.z.green <- qnorm(.025)
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
S.y  <- c(0, dnorm(seq(from.z, to.z.green, 0.01)), 0)
polygon(S.x,S.y, col="green") #85% people
S.x  <- c(from.z, seq(from.z, to.z.yellow, 0.01), to.z.yellow)
S.y  <- c(0, dnorm(seq(from.z, to.z.yellow, 0.01)), 0)
polygon(S.x,S.y, col="yellow") #95% People
S.x  <- c(from.z, seq(from.z, to.z.red, 0.01), to.z.red)
S.y  <- c(0, dnorm(seq(from.z, to.z.red, 0.01)), 0)
polygon(S.x,S.y, col="red") #<1% People
abline(v=score,col="black",lwd=3,lty="dotted")
}
runApp()
runApp()
source("plotscores.R")
runApp()
source("plotscores.R")
plotscores(1,"temp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
system.file()
system.file("Red_phys_test.html")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
S.x  <- c(from.z, seq(from.z, to.z.green, 0.01), to.z.green)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("markdown")
runApp()
runApp()
F2
coef(F2)
coef(F2,simplify=TRUE)
runApp()
save.image()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
save.image()
shiny::runApp()
shiny::runApp()
#options(shiny.error = browser)
F2<-readRDS("data/Mod2F.RDS")
head(F2)
F2
str(F2)
scoring<-function(mod,input){
F2<-mod
pattern<-input
scores1<-fscores(F2,method="EAP",response.pattern=pattern)
color<-c("blank","blank")
color[scores1[13]>=(-1)][1]<-c("green")
color[scores1[13]<=(-1)][1]<-c("yellow")
color[scores1[13]<=(-2)][1]<-c("red")
color[scores1[14]>=(-1)][2]<-c("green")
color[scores1[14]<=(-1)][2]<-c("yellow")
color[scores1[14]<=(-2)][2]<-c("red")
if(color[1]=="red"){
warn1<-paste0("Patients in this range will have severe issues with psychological well-being and social relationships. Doctors should look for patients with cognitive impairments (e.g., memory), anxiety, mood disturbances, and complaints about social relationships")
}else if(color[1]=="yellow"){
warn1<-paste0("Patients in this range will either have issues with their psychological well-being or social relationships. Doctors should look for patients with any of the following: cognitive impairments (e.g., memory), anxiety, mood disturbances, or complaints about social relationships")
}else{
warn1<-paste0("Patients in this range will have little to no complaints about psychosocial well-being.")
}
if(color[2]=="red"){
warn2<-paste0("Patients in this range will have severe issues with physical well-being. Doctors should look for patients who are having trouble sleeping or complain about wounds(i.e., bruises or wounds).")
}else if(color[2]=="yellow"){
warn2<-paste0("Patients in this range will either have issues with physical well-being. Doctors should look for patients who are having sleep disturbances or complaints about wounds (i.e., bruising or healing).")
}else{
warn2<-paste0("Patients in this range will have little to no complaints about physical well-being.")
}
res=list(scoresF1=scores1[c(13,15)],scoresF2=scores1[c(14,16)],pattern=pattern,color=color,scale1=warn1,scale2=warn2)
return(res)
}
scoring(F2,c(1,2,2,2,3,1,1,2,3,3,1,1))
debug(scoring)
scoring(F2,c(1,2,2,2,3,1,1,2,3,3,1,1))
fscores(F2)
F2<-readRDS("data/Mod2F.RDS")
str(F2)
F2@Model
